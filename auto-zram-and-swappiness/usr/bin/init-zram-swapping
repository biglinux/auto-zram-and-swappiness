#!/bin/sh



# load dependency modules
NRDEVICES=$(grep -c ^processor /proc/cpuinfo | sed 's/^0$/1/')
if modinfo zram | grep -q ' zram_num_devices:' 2>/dev/null; then
  MODPROBE_ARGS="zram_num_devices=${NRDEVICES}"
elif modinfo zram | grep -q ' num_devices:' 2>/dev/null; then
  MODPROBE_ARGS="num_devices=${NRDEVICES}"
else
  exit 1
fi
modprobe zram $MODPROBE_ARGS

memtotal="$[$(grep MemTotal /proc/meminfo | awk '{ print $2 }') / 10 * 3]"

mem=$((($memtotal / ${NRDEVICES}) * 1024))


# initialize the devices
for i in $(seq ${NRDEVICES}); do
  DEVNUMBER=$((i - 1))
#  echo zstd > /sys/block/zram${DEVNUMBER}/comp_algorithm
  echo $mem > /sys/block/zram${DEVNUMBER}/disksize

#  echo 0 >/sys/block/zram${DEVNUMBER}/queue/read_ahead_kb
#  echo 2 >/sys/block/zram${DEVNUMBER}/queue/nomerges
#  echo 2 >/sys/block/zram${DEVNUMBER}/queue/rq_affinity
  mkswap /dev/zram${DEVNUMBER}
  swapon -p 100 /dev/zram${DEVNUMBER}
done

echo 20 >/proc/sys/vm/swappiness
echo 30 > /proc/sys/vm/dirty_ratio
echo 5 > /proc/sys/vm/dirty_background_ratio

#echo 100 > /proc/sys/vm/vfs_cache_pressure
#echo 0 > /sys/class/block/sda/queue/read_ahead_kb
#modprobe bfq
#echo bfq > /sys/class/block/sda/queue/scheduler
#echo mq-bfq > /sys/class/block/sda/queue/scheduler

#echo 1 >/proc/sys/vm/compact_memory
#echo 1 >/proc/sys/kernel/sched_child_runs_first
#echo 1000000 >/proc/sys/kernel/sched_min_granularity_ns
#echo 10000000 >/proc/sys/kernel/sched_wakeup_granularity_ns

#echo 1 >/sys/kernel/mm/ksm/run
#echo 1 > /proc/sys/vm/overcommit_memory
# echo 20 >/proc/sys/vm/swappiness
# echo 100 > /proc/sys/vm/vfs_cache_pressure
# echo 10 > /sys/module/zswap/parameters/max_pool_percent
#echo 12000 > /proc/sys/vm/min_free_kbytes
# echo 3000 > /proc/sys/kernel/sched_cfs_bandwidth_slice_us 
# echo 3000000 > /proc/sys/kernel/sched_latency_ns 
# echo 300000 > /proc/sys/kernel/sched_min_granularity_ns 
# echo 500000 > /proc/sys/kernel/sched_wakeup_granularity_ns 
# echo 50000 > /proc/sys/kernel/sched_migration_cost_ns 
# echo 128 > /proc/sys/kernel/sched_nr_migrate
#echo 0 >/proc/sys/vm/page-cluster
#echo 0 >/proc/sys/vm/extfrag_threshold
#echo 1 >/proc/sys/vm/watermark_scale_factor





###################
####### Imported from https://github.com/igo95862/cfs-zen-tweaks/blob/master/set-cfs-zen-tweaks.sh
###################

# SPDX-License-Identifier: GPL-2.0-only
# Copyright (C) 2021  igo95862

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation, version 2.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

#set -eu
# 
LATENCY_MS=4
MIN_GRANULARITY_MS=0.4
WAKEUP_GRANULARITY_MS=0.5
MIGRATION_COST_MS=0.25
BANDWIDTH_SIZE_MS=3


echo "Targeted preemption latency for CPU-bound tasks: ${LATENCY_MS}ms"
echo "Minimal preemption granularity for CPU-bound tasks: ${MIN_GRANULARITY_MS}ms"
echo "Wake-up granularity: ${WAKEUP_GRANULARITY_MS}ms"
echo "Task migration cost: ${MIGRATION_COST_MS}ms"
echo "Amount of runtime to allocate from global to local pool: ${BANDWIDTH_SIZE_MS}ms"

call_gawk() {
  printf '%s' "$(gawk 'BEGIN {print '"${1}"'}')"
}

NPROC="$(nproc)"
# Linux uses this algorithm to multiply miliseconds
MODIFIER="$( call_gawk "10 ** 6 * (1 + int(log(${NPROC}) / log(2)))" )"

LATENCY_NS_FILE="/sys/kernel/debug/sched/latency_ns"
MIN_GRANULARITY_NS_FILE="/sys/kernel/debug/sched/min_granularity_ns"
WAKEUP_GRANULARITY_NS_FILE="/sys/kernel/debug/sched/wakeup_granularity_ns"
MIGRATION_COST_NS_FILE="/sys/kernel/debug/sched/migration_cost_ns"
BANDWIDTH_SIZE_US_FILE="/proc/sys/kernel/sched_cfs_bandwidth_slice_us"
# 
if [ ! -f "$LATENCY_NS_FILE" ]; then
    echo "Detected kernel <5.13. Using legacy locations."
    LATENCY_NS_FILE="/proc/sys/kernel/sched_latency_ns"
    MIN_GRANULARITY_NS_FILE="/proc/sys/kernel/sched_min_granularity_ns"
    WAKEUP_GRANULARITY_NS_FILE="/proc/sys/kernel/sched_wakeup_granularity_ns"
    MIGRATION_COST_NS_FILE="/proc/sys/kernel/sched_migration_cost_ns"
fi

printf '%s' "$( call_gawk "int(${LATENCY_MS} * ${MODIFIER})" )" > "$LATENCY_NS_FILE"
printf '%s' "$( call_gawk "int(${MIN_GRANULARITY_MS} * ${MODIFIER})" )" > "$MIN_GRANULARITY_NS_FILE"
printf '%s' "$( call_gawk "int(${WAKEUP_GRANULARITY_MS} * ${MODIFIER})" )" > "$WAKEUP_GRANULARITY_NS_FILE"
printf '%s' "$( call_gawk "int(${MIGRATION_COST_MS} * ${MODIFIER})" )" > "$MIGRATION_COST_NS_FILE"
printf '%s' "$( call_gawk "int(${BANDWIDTH_SIZE_MS} * 1000)" )" > "$BANDWIDTH_SIZE_US_FILE"
